{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Huzaifa\\\\Documents\\\\Fall 2020\\\\SENG 513\\\\Assignment3\\\\Chat-App\\\\client-side\\\\src\\\\components\\\\chatApp\\\\chatApp.jsx\";\nimport React, { Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport MessageArea from '../messageArea/messageArea';\nimport \"./chatApp.css\";\nimport OnlineUsers from './../onlineUsers/onlineUsers';\n\nclass ChatApp extends Component {\n  constructor() {\n    super();\n    this.state = {\n      // structure --> {message, timestamp, username, color}\n      messages: [],\n      username: \"\",\n      color: \"\",\n      // structure --> {username, color}\n      otherUsers: [],\n      // list of all emojis the ChatApp can understand\n      emojiList: [{\n        emoji: \":)\",\n        decimalCode: 128512\n      }, {\n        emoji: \":(\",\n        decimalCode: 128577\n      }, {\n        emoji: \":o\",\n        decimalCode: 128558\n      }, {\n        emoji: \":O\",\n        decimalCode: 128558\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.socket = socketIOClient();\n    this.socket.on(\"cookie\", socketID => {\n      console.log(document.cookie);\n      let cookies = document.cookie.split(\";\");\n\n      for (let i = 0; i < cookies.length; i++) {\n        let cookie = cookies[i];\n        let eqPos = cookie.indexOf(\"=\");\n        let name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\n        document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\n      }\n\n      document.cookie = `socketID=${socketID};expires=${new Date(2021, 0, 1).toUTCString()}`;\n    });\n    this.socket.on(\"own username\", (username, defaultColor) => {\n      // document.cookie = `username=${username}`; \n      // console.log(document.cookie)\n      this.setState({\n        username: username,\n        color: defaultColor\n      });\n    });\n    this.socket.on(\"other users' names\", allUsers => {\n      const otherUsers = this.filterAllUsers(allUsers);\n      this.setState({\n        otherUsers: otherUsers\n      });\n    });\n    this.socket.on(\"chat message\", chatLog => {\n      console.log(\"Message recieved: \", chatLog);\n      this.setState({\n        messages: chatLog\n      });\n    });\n    this.socket.on(\"change own color\", (color, chatLog) => {\n      this.setState({\n        messages: chatLog,\n        color: color\n      });\n    });\n    this.socket.on(\"change color\", (chatLog, allUsers) => {\n      const otherUsers = this.filterAllUsers(allUsers);\n      this.setState({\n        messages: chatLog,\n        otherUsers: otherUsers\n      });\n    });\n    this.socket.on(\"change own username\", (username, chatLog) => {\n      console.table(this.state.messages);\n      this.setState({\n        messages: chatLog,\n        username: username\n      });\n      console.table(this.state.messages);\n    });\n    this.socket.on(\"change usernames\", (chatLog, allUsers) => {\n      const otherUsers = this.filterAllUsers(allUsers);\n      this.setState({\n        messages: chatLog,\n        otherUsers: otherUsers\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    // manually close it just in case (though it doesnt really appear to do anything)\n    this.socket.close();\n  } // filters incoming user data to exclude own\n\n\n  filterAllUsers(allUsers) {\n    return allUsers.filter(user => user.username !== this.state.username);\n  } // responsible for sending messages to server\n\n\n  handleSendingMessages(message) {\n    console.log(\"Action Recognized --> \", message);\n\n    if (message) {\n      if (this.isColorCommand(message)) {\n        this.socket.emit(\"change color\", message.split(\" \")[1]);\n      } else if (this.isUsernameChangeCommand(message)) {\n        this.socket.emit(\"change username\", message.slice(7, message.length - 1));\n      } else {\n        console.log(\"Message from client --> \", message);\n        this.socket.emit(\"chat message\", message, this.state.username, this.state.color);\n      }\n    }\n  }\n\n  isColorCommand(message) {\n    const commandString = message.split(\" \");\n    if (commandString.length === 2 && commandString[0].slice(0, 6) === \"/color\") return true;\n    return false;\n  }\n\n  isUsernameChangeCommand(message) {\n    if (message.slice(0, 5) === \"/name\" && message.slice(6, 7) === \"<\" && message.slice(message.length - 1) === \">\") return true;\n    return false;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(MessageArea, {\n        username: this.state.username,\n        messages: this.state.messages,\n        onMessage: msg => this.handleSendingMessages(msg),\n        emojiList: this.state.emojiList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OnlineUsers, {\n        username: this.state.username,\n        color: this.state.color,\n        otherUsers: this.state.otherUsers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ChatApp;","map":{"version":3,"sources":["C:/Users/Huzaifa/Documents/Fall 2020/SENG 513/Assignment3/Chat-App/client-side/src/components/chatApp/chatApp.jsx"],"names":["React","Component","socketIOClient","MessageArea","OnlineUsers","ChatApp","constructor","state","messages","username","color","otherUsers","emojiList","emoji","decimalCode","componentDidMount","socket","on","socketID","console","log","document","cookie","cookies","split","i","length","eqPos","indexOf","name","substr","Date","toUTCString","defaultColor","setState","allUsers","filterAllUsers","chatLog","table","componentWillUnmount","close","filter","user","handleSendingMessages","message","isColorCommand","emit","isUsernameChangeCommand","slice","commandString","render","msg"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport socketIOClient from \"socket.io-client\";\r\nimport MessageArea from '../messageArea/messageArea';\r\nimport \"./chatApp.css\";\r\nimport OnlineUsers from './../onlineUsers/onlineUsers';\r\n\r\nclass ChatApp extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            // structure --> {message, timestamp, username, color}\r\n            messages: [],\r\n            username: \"\",\r\n            color: \"\",\r\n            // structure --> {username, color}\r\n            otherUsers: [],\r\n            // list of all emojis the ChatApp can understand\r\n            emojiList: [\r\n                { emoji: \":)\", decimalCode: 128512}, { emoji: \":(\", decimalCode: 128577}, {emoji: \":o\", decimalCode: 128558}, {emoji: \":O\", decimalCode: 128558}\r\n            ]\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.socket = socketIOClient();\r\n\r\n        this.socket.on(\"cookie\", socketID => {\r\n            console.log(document.cookie)\r\n            let cookies = document.cookie.split(\";\");\r\n\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                let cookie = cookies[i];\r\n                let eqPos = cookie.indexOf(\"=\");\r\n                let name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\r\n                document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n            }\r\n            document.cookie = `socketID=${socketID};expires=${new Date(2021, 0, 1).toUTCString()}`;\r\n        });\r\n\r\n        this.socket.on(\"own username\", (username, defaultColor) => {\r\n            // document.cookie = `username=${username}`; \r\n            // console.log(document.cookie)\r\n            this.setState({username: username, color: defaultColor});\r\n        });\r\n\r\n        this.socket.on(\"other users' names\", allUsers => {\r\n            const otherUsers = this.filterAllUsers(allUsers);\r\n            this.setState({otherUsers: otherUsers});\r\n        });\r\n        \r\n        this.socket.on(\"chat message\", chatLog => {\r\n            console.log(\"Message recieved: \", chatLog)\r\n            this.setState({messages: chatLog});\r\n        });\r\n\r\n        this.socket.on(\"change own color\", (color, chatLog) => {\r\n            this.setState({messages: chatLog, color: color});\r\n        });\r\n\r\n        this.socket.on(\"change color\", (chatLog, allUsers) => {\r\n            const otherUsers = this.filterAllUsers(allUsers);\r\n            this.setState({messages: chatLog, otherUsers: otherUsers});\r\n        });\r\n\r\n        this.socket.on(\"change own username\", (username, chatLog) => {\r\n            console.table(this.state.messages);\r\n            this.setState({messages: chatLog, username: username});\r\n            console.table(this.state.messages);\r\n        });\r\n\r\n        this.socket.on(\"change usernames\", (chatLog, allUsers) => {\r\n            const otherUsers = this.filterAllUsers(allUsers);\r\n            this.setState({messages: chatLog, otherUsers: otherUsers});\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        // manually close it just in case (though it doesnt really appear to do anything)\r\n        this.socket.close();\r\n    }\r\n\r\n    // filters incoming user data to exclude own\r\n    filterAllUsers(allUsers) {\r\n        return allUsers.filter(user => user.username !== this.state.username);\r\n    }\r\n\r\n    // responsible for sending messages to server\r\n    handleSendingMessages(message) {\r\n        console.log(\"Action Recognized --> \", message)\r\n        if (message) {\r\n            if (this.isColorCommand(message)) {\r\n                this.socket.emit(\"change color\", message.split(\" \")[1])\r\n            }\r\n            else if (this.isUsernameChangeCommand(message)) {\r\n                this.socket.emit(\"change username\", message.slice(7, message.length-1));\r\n            }\r\n            else {\r\n                console.log(\"Message from client --> \", message)\r\n                this.socket.emit(\"chat message\", message, this.state.username, this.state.color);\r\n            }\r\n        }\r\n    }\r\n\r\n    isColorCommand(message) {\r\n        const commandString = message.split(\" \");\r\n        if (commandString.length === 2 && commandString[0].slice(0, 6) === \"/color\")\r\n            return true;\r\n        return false; \r\n    }\r\n\r\n    isUsernameChangeCommand(message) {\r\n        if (message.slice(0, 5) === \"/name\" && message.slice(6, 7) === \"<\" && message.slice(message.length-1) === \">\")\r\n            return true;\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <MessageArea username={this.state.username} messages={this.state.messages} onMessage={(msg) => this.handleSendingMessages(msg)} emojiList={this.state.emojiList}/>\r\n                <OnlineUsers username={this.state.username} color={this.state.color} otherUsers={this.state.otherUsers}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChatApp;\r\n"]},"metadata":{},"sourceType":"module"}