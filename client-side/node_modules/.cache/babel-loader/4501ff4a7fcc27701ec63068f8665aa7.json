{"ast":null,"code":"/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\n\n/**\r\n * Module exports.\r\n * @public\r\n */\nexports.parse = parse;\nexports.serialize = serialize;\n/**\r\n * Module variables.\r\n * @private\r\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {};\n  var opt = options || {};\n  var pairs = str.split(/; */);\n  var dec = opt.decode || decode;\n  pairs.forEach(function (pair) {\n    var eq_idx = pair.indexOf('='); // skip things that don't look like key=value\n\n    if (eq_idx < 0) {\n      return;\n    }\n\n    var key = pair.substr(0, eq_idx).trim();\n    var val = pair.substr(++eq_idx, pair.length).trim(); // quoted values\n\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    } // only assign once\n\n\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  });\n  return obj;\n}\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\n\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var pairs = [name + '=' + value];\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\n    pairs.push('Max-Age=' + maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    pairs.push('Domain=' + opt.domain);\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    pairs.push('Path=' + opt.path);\n  }\n\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\n  if (opt.httpOnly) pairs.push('HttpOnly');\n  if (opt.secure) pairs.push('Secure');\n  return pairs.join('; ');\n}\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\n\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}","map":{"version":3,"sources":["C:/Users/Huzaifa/Documents/Fall 2020/SENG 513/Assignment3/Chat-App/client-side/node_modules/socket.io-cookie/node_modules/cookie/index.js"],"names":["exports","parse","serialize","decode","decodeURIComponent","encode","encodeURIComponent","fieldContentRegExp","str","options","TypeError","obj","opt","pairs","split","dec","forEach","pair","eq_idx","indexOf","key","substr","trim","val","length","slice","undefined","tryDecode","name","enc","test","value","maxAge","isNaN","Error","push","domain","path","expires","toUTCString","httpOnly","secure","join","e"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEAA,OAAO,CAACC,KAAR,GAAgBA,KAAhB;AACAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AAEA;AACA;AACA;AACA;;AAEA,IAAIC,MAAM,GAAGC,kBAAb;AACA,IAAIC,MAAM,GAAGC,kBAAb;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,kBAAkB,GAAG,uCAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASN,KAAT,CAAeO,GAAf,EAAoBC,OAApB,EAA6B;AAC3B,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,SAAJ,CAAc,+BAAd,CAAN;AACD;;AAED,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAII,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,KAAV,CAAZ;AACA,MAAIC,GAAG,GAAGH,GAAG,CAACT,MAAJ,IAAcA,MAAxB;AAEAU,EAAAA,KAAK,CAACG,OAAN,CAAc,UAASC,IAAT,EAAe;AAC3B,QAAIC,MAAM,GAAGD,IAAI,CAACE,OAAL,CAAa,GAAb,CAAb,CAD2B,CAG3B;;AACA,QAAID,MAAM,GAAG,CAAb,EAAgB;AACd;AACD;;AAED,QAAIE,GAAG,GAAGH,IAAI,CAACI,MAAL,CAAY,CAAZ,EAAeH,MAAf,EAAuBI,IAAvB,EAAV;AACA,QAAIC,GAAG,GAAGN,IAAI,CAACI,MAAL,CAAY,EAAEH,MAAd,EAAsBD,IAAI,CAACO,MAA3B,EAAmCF,IAAnC,EAAV,CAT2B,CAW3B;;AACA,QAAI,OAAOC,GAAG,CAAC,CAAD,CAAd,EAAmB;AACjBA,MAAAA,GAAG,GAAGA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,CAAC,CAAd,CAAN;AACD,KAd0B,CAgB3B;;;AACA,QAAIC,SAAS,IAAIf,GAAG,CAACS,GAAD,CAApB,EAA2B;AACzBT,MAAAA,GAAG,CAACS,GAAD,CAAH,GAAWO,SAAS,CAACJ,GAAD,EAAMR,GAAN,CAApB;AACD;AACF,GApBD;AAsBA,SAAOJ,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAAST,SAAT,CAAmB0B,IAAnB,EAAyBL,GAAzB,EAA8Bd,OAA9B,EAAuC;AACrC,MAAIG,GAAG,GAAGH,OAAO,IAAI,EAArB;AACA,MAAIoB,GAAG,GAAGjB,GAAG,CAACP,MAAJ,IAAcA,MAAxB;;AAEA,MAAI,CAACE,kBAAkB,CAACuB,IAAnB,CAAwBF,IAAxB,CAAL,EAAoC;AAClC,UAAM,IAAIlB,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAIqB,KAAK,GAAGF,GAAG,CAACN,GAAD,CAAf;;AAEA,MAAIQ,KAAK,IAAI,CAACxB,kBAAkB,CAACuB,IAAnB,CAAwBC,KAAxB,CAAd,EAA8C;AAC5C,UAAM,IAAIrB,SAAJ,CAAc,yBAAd,CAAN;AACD;;AAED,MAAIG,KAAK,GAAG,CAACe,IAAI,GAAG,GAAP,GAAaG,KAAd,CAAZ;;AAEA,MAAI,QAAQnB,GAAG,CAACoB,MAAhB,EAAwB;AACtB,QAAIA,MAAM,GAAGpB,GAAG,CAACoB,MAAJ,GAAa,CAA1B;AACA,QAAIC,KAAK,CAACD,MAAD,CAAT,EAAmB,MAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACnBrB,IAAAA,KAAK,CAACsB,IAAN,CAAW,aAAaH,MAAxB;AACD;;AAED,MAAIpB,GAAG,CAACwB,MAAR,EAAgB;AACd,QAAI,CAAC7B,kBAAkB,CAACuB,IAAnB,CAAwBlB,GAAG,CAACwB,MAA5B,CAAL,EAA0C;AACxC,YAAM,IAAI1B,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAEDG,IAAAA,KAAK,CAACsB,IAAN,CAAW,YAAYvB,GAAG,CAACwB,MAA3B;AACD;;AAED,MAAIxB,GAAG,CAACyB,IAAR,EAAc;AACZ,QAAI,CAAC9B,kBAAkB,CAACuB,IAAnB,CAAwBlB,GAAG,CAACyB,IAA5B,CAAL,EAAwC;AACtC,YAAM,IAAI3B,SAAJ,CAAc,wBAAd,CAAN;AACD;;AAEDG,IAAAA,KAAK,CAACsB,IAAN,CAAW,UAAUvB,GAAG,CAACyB,IAAzB;AACD;;AAED,MAAIzB,GAAG,CAAC0B,OAAR,EAAiBzB,KAAK,CAACsB,IAAN,CAAW,aAAavB,GAAG,CAAC0B,OAAJ,CAAYC,WAAZ,EAAxB;AACjB,MAAI3B,GAAG,CAAC4B,QAAR,EAAkB3B,KAAK,CAACsB,IAAN,CAAW,UAAX;AAClB,MAAIvB,GAAG,CAAC6B,MAAR,EAAgB5B,KAAK,CAACsB,IAAN,CAAW,QAAX;AAEhB,SAAOtB,KAAK,CAAC6B,IAAN,CAAW,IAAX,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASf,SAAT,CAAmBnB,GAAnB,EAAwBL,MAAxB,EAAgC;AAC9B,MAAI;AACF,WAAOA,MAAM,CAACK,GAAD,CAAb;AACD,GAFD,CAEE,OAAOmC,CAAP,EAAU;AACV,WAAOnC,GAAP;AACD;AACF","sourcesContent":["/*!\r\n * cookie\r\n * Copyright(c) 2012-2014 Roman Shtylman\r\n * Copyright(c) 2015 Douglas Christopher Wilson\r\n * MIT Licensed\r\n */\r\n\r\n/**\r\n * Module exports.\r\n * @public\r\n */\r\n\r\nexports.parse = parse;\r\nexports.serialize = serialize;\r\n\r\n/**\r\n * Module variables.\r\n * @private\r\n */\r\n\r\nvar decode = decodeURIComponent;\r\nvar encode = encodeURIComponent;\r\n\r\n/**\r\n * RegExp to match field-content in RFC 7230 sec 3.2\r\n *\r\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\r\n * field-vchar   = VCHAR / obs-text\r\n * obs-text      = %x80-FF\r\n */\r\n\r\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\r\n\r\n/**\r\n * Parse a cookie header.\r\n *\r\n * Parse the given cookie header string into an object\r\n * The object has the various cookies as keys(names) => values\r\n *\r\n * @param {string} str\r\n * @param {object} [options]\r\n * @return {object}\r\n * @public\r\n */\r\n\r\nfunction parse(str, options) {\r\n  if (typeof str !== 'string') {\r\n    throw new TypeError('argument str must be a string');\r\n  }\r\n\r\n  var obj = {}\r\n  var opt = options || {};\r\n  var pairs = str.split(/; */);\r\n  var dec = opt.decode || decode;\r\n\r\n  pairs.forEach(function(pair) {\r\n    var eq_idx = pair.indexOf('=')\r\n\r\n    // skip things that don't look like key=value\r\n    if (eq_idx < 0) {\r\n      return;\r\n    }\r\n\r\n    var key = pair.substr(0, eq_idx).trim()\r\n    var val = pair.substr(++eq_idx, pair.length).trim();\r\n\r\n    // quoted values\r\n    if ('\"' == val[0]) {\r\n      val = val.slice(1, -1);\r\n    }\r\n\r\n    // only assign once\r\n    if (undefined == obj[key]) {\r\n      obj[key] = tryDecode(val, dec);\r\n    }\r\n  });\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Serialize data into a cookie header.\r\n *\r\n * Serialize the a name value pair into a cookie string suitable for\r\n * http headers. An optional options object specified cookie parameters.\r\n *\r\n * serialize('foo', 'bar', { httpOnly: true })\r\n *   => \"foo=bar; httpOnly\"\r\n *\r\n * @param {string} name\r\n * @param {string} val\r\n * @param {object} [options]\r\n * @return {string}\r\n * @public\r\n */\r\n\r\nfunction serialize(name, val, options) {\r\n  var opt = options || {};\r\n  var enc = opt.encode || encode;\r\n\r\n  if (!fieldContentRegExp.test(name)) {\r\n    throw new TypeError('argument name is invalid');\r\n  }\r\n\r\n  var value = enc(val);\r\n\r\n  if (value && !fieldContentRegExp.test(value)) {\r\n    throw new TypeError('argument val is invalid');\r\n  }\r\n\r\n  var pairs = [name + '=' + value];\r\n\r\n  if (null != opt.maxAge) {\r\n    var maxAge = opt.maxAge - 0;\r\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\r\n    pairs.push('Max-Age=' + maxAge);\r\n  }\r\n\r\n  if (opt.domain) {\r\n    if (!fieldContentRegExp.test(opt.domain)) {\r\n      throw new TypeError('option domain is invalid');\r\n    }\r\n\r\n    pairs.push('Domain=' + opt.domain);\r\n  }\r\n\r\n  if (opt.path) {\r\n    if (!fieldContentRegExp.test(opt.path)) {\r\n      throw new TypeError('option path is invalid');\r\n    }\r\n\r\n    pairs.push('Path=' + opt.path);\r\n  }\r\n\r\n  if (opt.expires) pairs.push('Expires=' + opt.expires.toUTCString());\r\n  if (opt.httpOnly) pairs.push('HttpOnly');\r\n  if (opt.secure) pairs.push('Secure');\r\n\r\n  return pairs.join('; ');\r\n}\r\n\r\n/**\r\n * Try decoding a string using a decoding function.\r\n *\r\n * @param {string} str\r\n * @param {function} decode\r\n * @private\r\n */\r\n\r\nfunction tryDecode(str, decode) {\r\n  try {\r\n    return decode(str);\r\n  } catch (e) {\r\n    return str;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}