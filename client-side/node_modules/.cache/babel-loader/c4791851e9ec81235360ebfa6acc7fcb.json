{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Huzaifa\\\\Documents\\\\Fall 2020\\\\SENG 513\\\\Assignment3\\\\Chat-App\\\\client-side\\\\src\\\\components\\\\messageArea\\\\messageArea.jsx\";\nimport React, { Component } from 'react';\nimport \"./messageArea.css\";\nimport $ from \"jquery\";\n\nclass MessageArea extends Component {\n  getUserMessage() {\n    const userMsg = $(\"#user_msg\").val();\n    $(\"#user_msg\").val(\"\");\n    return userMsg;\n  }\n\n  makeOwnMessagesBold(username, message) {\n    if (username === this.props.username) {\n      return /*#__PURE__*/_jsxDEV(\"b\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  injectEmojis(message) {\n    for (let i = 0; i < this.props.emojiList.length; i++) {\n      const emojiEntry = this.props.emojiList[i];\n      message = message.replaceAll(emojiEntry.emoji, String.fromCodePoint(emojiEntry.decimalCode));\n    }\n\n    return message;\n  }\n\n  scrollToBottom() {\n    const messageArea = $(\".message-area-group-list\");\n    const listArea = $(\"#list-group\");\n    messageArea.scrollTop(listArea.height());\n    console.log(listArea.height());\n  }\n\n  render() {\n    let countForMsg = 0;\n    let countForUsername = 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-area-group-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"list-group\",\n          children: this.props.messages.map(message => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"list-group-item\",\n            children: [message.timestamp, \" \", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                color: \"#\" + message.color\n              },\n              children: message.username\n            }, countForUsername++, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 33\n            }, this), \" \", \" \", this.makeOwnMessagesBold(message.username, this.injectEmojis(message.message))]\n          }, countForMsg++, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 21\n        }, this), this.scrollToBottom()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-area-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"user_msg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          id: \"submit\",\n          onClick: () => this.props.onMessage(this.getUserMessage()),\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default MessageArea;","map":{"version":3,"sources":["C:/Users/Huzaifa/Documents/Fall 2020/SENG 513/Assignment3/Chat-App/client-side/src/components/messageArea/messageArea.jsx"],"names":["React","Component","$","MessageArea","getUserMessage","userMsg","val","makeOwnMessagesBold","username","message","props","injectEmojis","i","emojiList","length","emojiEntry","replaceAll","emoji","String","fromCodePoint","decimalCode","scrollToBottom","messageArea","listArea","scrollTop","height","console","log","render","countForMsg","countForUsername","messages","map","timestamp","color","onMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport \"./messageArea.css\";\r\nimport $ from \"jquery\";\r\n\r\nclass MessageArea extends Component {\r\n    getUserMessage() {\r\n        const userMsg = $(\"#user_msg\").val();\r\n        $(\"#user_msg\").val(\"\");\r\n        return userMsg;\r\n    }\r\n\r\n    makeOwnMessagesBold(username, message) {\r\n        if (username === this.props.username) {\r\n            return <b>{message}</b>;\r\n        }\r\n        else {\r\n            return <React.Fragment>{message}</React.Fragment>;\r\n        }\r\n    }\r\n\r\n    injectEmojis(message){\r\n        for (let i = 0; i < this.props.emojiList.length; i++) {\r\n            const emojiEntry = this.props.emojiList[i];\r\n            message = message.replaceAll(emojiEntry.emoji, String.fromCodePoint(emojiEntry.decimalCode));\r\n        }\r\n        return message;\r\n    }\r\n\r\n    scrollToBottom(){\r\n        const messageArea = $(\".message-area-group-list\");\r\n        const listArea = $(\"#list-group\");\r\n        messageArea.scrollTop(listArea.height());\r\n        console.log(listArea.height())\r\n    }   \r\n\r\n    render() { \r\n        let countForMsg = 0;\r\n        let countForUsername = 0;\r\n\r\n        return (  \r\n            <div className=\"message-area\"> \r\n                <div className=\"message-area-group-list\"> \r\n                    <ul id=\"list-group\">\r\n                        {this.props.messages.map(message =>  \r\n                            <li key={countForMsg++} className=\"list-group-item\">\r\n                                {message.timestamp} {\" \"}\r\n                                <span key={countForUsername++} style={{color: \"#\" + message.color}}>{message.username}</span> {\" \"}\r\n                                {this.makeOwnMessagesBold(message.username, this.injectEmojis(message.message))}\r\n                            </li>\r\n                        )}\r\n                    </ul>\r\n                    {this.scrollToBottom()}\r\n                </div>\r\n                <div className=\"message-area-form\">\r\n                    <input id=\"user_msg\"></input>\r\n                    <button className=\"btn btn-success\" id=\"submit\" onClick={() => this.props.onMessage(this.getUserMessage())}>Send</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default MessageArea;"]},"metadata":{},"sourceType":"module"}